name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
    runs-on: ${{ matrix.os }}-latest
    env:
      ci: true
      AKKA_LICENSE_KEY: ${{ secrets.AKKA_LICENSE_KEY }}
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.21
      - name: Set up JDK
        uses: actions/setup-java@v4.4.0
        with:
          distribution: temurin
          java-version: 17
          cache: sbt
      - uses: sbt/setup-sbt@v1.1.1
      - name: Build and test
        shell: bash
        run: sbt -v +test
      - name: Check formatting
        shell: bash
        run: sbt -v scalafmtCheckAll
      - name: Run linter
        shell: bash
        run: sbt -v "scalafixAll --check"
  release:
    permissions:
      contents: write
      packages: write
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1
      - uses: actions/setup-node@v4.0.4
        with:
          cache: npm
          node-version: lts/*
      - run: npm clean-install
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  upload-docs:
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.scala-version.outputs.version }}
    needs:
      - release
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    # Skips if is PR or isn't inside main branch
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.1
      - name: build docs
        uses: actions/setup-node@v4.0.4
        with:
          cache: npm
          node-version: lts/*
      - name: Set up JDK
        uses: actions/setup-java@v4.4.0
        with:
          distribution: temurin
          java-version: 17
          cache: sbt
      - uses: sbt/setup-sbt@v1.1.1
      - name: Build docs
        run: sbt -v doc
      - name: Extract Scala version
        id: scala-version
        run:
          echo "version='$(sbt 'show scalaVersion' | grep -oP '(?<=\[info\] )\d+\.\d+\.\d+')'" >> "$GITHUB_OUTPUT"
          echo "version='$(sbt 'show scalaVersion' | grep -oP '(?<=\[info\] )\d+\.\d+\.\d+')'"
      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: gh-pages
          build_dir: target/scala-${{ steps.scala-version.outputs.version }}/api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy-image:
    permissions:
      contents: write
      packages: write
    concurrency:
      group: release
    runs-on: ubuntu-latest
    needs:
      - release
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    # Skips if is PR or isn't inside main branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.1
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@1f36f5b7a2d2f7bfd524795fc966e6d88c37baa9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@70b2cdc6480c1a8b86edf1777157f8f437de2166
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  success:
    runs-on: ubuntu-latest
    needs:
      - build
      - release
      - deploy-image
      - upload-docs
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
